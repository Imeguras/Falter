buildscript {
    repositories {
        mavenCentral()
        //jcenter()
        maven {
            name = 'forge'
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        //1.2-SNAPSHOT
        //classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}
repositories {
    /*maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }*/
}

apply plugin: 'forge'
//apply plugin: 'curseforge'

ext.configFile = file('gradle.properties')

ext.config = parseConfig(configFile)
version = "${config.version}-${config.build_number}"
group = config.org
archivesBaseName = config.mod_name

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${config.version}-${config.forge_version}-${config.version}"
    //runDir = "run"
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version
    //mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    /*compile files(
            'Baubles-deobf.jar'
    )
    compile "codechicken:CodeChickenLib:1.7.10-1.1.1.109:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.2.9:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.2.15:dev"
    compile "codechicken:ForgeMultipart:1.7.10-1.1.1.320:dev"
	*/

}

processResources{
    //inputs.property "version", project.version
    //inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version, 'modid': "${config.mod_id}", 'modname': "${config.mod_name}", 'description': "${config.mod_description}", 'url': "\"${config.mod_url}\"", 'authorList': "[ \"${config.mod_author}\" ]", 'credits': "${config.mod_credits}", 'logoFile': "${config.mod_logo}"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/psd/**'
    }
}

task apiJar(type: Jar){
	from(sourceSets.main.allJava){
		include 'com/imeguras/falter/api/**'
	}
	classifier = 'api'
}

artifacts {
	archives apiJar
}
def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
